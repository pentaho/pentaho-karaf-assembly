# * HITACHI VANTARA PROPRIETARY AND CONFIDENTIAL
# *
# * Copyright 2002 - 2019 Hitachi Vantara. All rights reserved.
# *
# * NOTICE: All information including source code contained herein is, and
# * remains the sole property of Hitachi Vantara and its licensors. The intellectual
# * and technical concepts contained herein are proprietary and confidential
# * to, and are trade secrets of Hitachi Vantara and may be covered by U.S. and foreign
# * patents, or patents in process, and are protected by trade secret and
# * copyright laws. The receipt or possession of this source code and/or related
# * information does not convey or imply any rights to reproduce, disclose or
# * distribute its contents, or to manufacture, use, or sell anything that it
# * may describe, in whole or in part. Any reproduction, modification, distribution,
# * or public display of this information without the express written authorization
# * from Hitachi Vantara is strictly prohibited and in violation of applicable laws and
# * international treaties. Access to the source code contained herein is strictly
# * prohibited to anyone except those individuals and entities who have executed
# * confidentiality and non-disclosure agreements or other agreements with Hitachi Vantara,
# * explicitly covering such access.

#
# Defines if the startlvl should be respected during feature startup. The default value is true. The default
# behavior for 2.x is false (!) for this property
#
# Be aware that this property is deprecated and will be removed in Karaf 4.0. So, if you need to
# set this to false, please use this only as a temporary solution!
#
#respectStartLvlDuringFeatureStartup=true

#
# Defines if the startlvl should be respected during feature uninstall. The default value is true.
# If true, means stop bundles respecting the descend order of start level in a certain feature.
#
#respectStartLvlDuringFeatureUninstall=true

#
# Comma separated list of features repositories to register by default
#
featuresRepositories = \
  mvn:org.apache.karaf.features/framework/${karaf.version}/xml/features, \
  mvn:org.apache.karaf.features/standard/${karaf.version}/xml/features, \
  mvn:org.apache.karaf.features/enterprise/${karaf.version}/xml/features, \
  mvn:org.apache.cxf.karaf/apache-cxf/${cxf.version}/xml/features, \
  mvn:org.apache.camel.karaf/apache-camel/${camel.karaf.version}/xml/features, \
  mvn:org.hitachivantara.karaf.features/pentaho-karaf-features-standard/${project.version}/xml/features,\
  mvn:pentaho-karaf-features/pentaho-big-data-plugin-osgi/${project.version}/xml/features, \
  mvn:pentaho/pentaho-dataservice-client/${project.version}/xml/features

#
# Comma separated list of features to install at startup
#
featuresBoot=\
  config,\
  pentaho-client-minimal,\
  pentaho-fasterxml,\
  pentaho-dataservice-client,\
  community-edition

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#


#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)		# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=true

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default

#
# Store cfg file for config element in feature
#
#configCfgStore=true
